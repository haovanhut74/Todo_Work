package vn.edu.tdmu.nguyenminhnhut.todo_work

import android.Manifest // Import l·ªõp Manifest ƒë·ªÉ truy c·∫≠p quy·ªÅn
import android.annotation.SuppressLint // Import annotation ƒë·ªÉ b·ªè qua c·∫£nh b√°o lint
import android.app.AlertDialog // Import l·ªõp AlertDialog ƒë·ªÉ t·∫°o h·ªôp tho·∫°i c·∫£nh b√°o
import android.app.DatePickerDialog // Import l·ªõp DatePickerDialog ƒë·ªÉ t·∫°o h·ªôp tho·∫°i ch·ªçn ng√†y
import android.app.NotificationChannel // Import l·ªõp NotificationChannel ƒë·ªÉ t·∫°o k√™nh th√¥ng b√°o
import android.app.NotificationManager // Import l·ªõp NotificationManager ƒë·ªÉ qu·∫£n l√Ω th√¥ng b√°o
import android.app.TimePickerDialog // Import l·ªõp TimePickerDialog ƒë·ªÉ t·∫°o h·ªôp tho·∫°i ch·ªçn gi·ªù
import android.content.Context // Import l·ªõp Context ƒë·ªÉ truy c·∫≠p t√†i nguy√™n ·ª©ng d·ª•ng
import android.content.pm.PackageManager // Import l·ªõp PackageManager ƒë·ªÉ qu·∫£n l√Ω c√°c g√≥i ·ª©ng d·ª•ng
import android.os.Build // Import l·ªõp Build ƒë·ªÉ ki·ªÉm tra phi√™n b·∫£n Android
import android.os.Bundle // Import l·ªõp Bundle ƒë·ªÉ truy·ªÅn d·ªØ li·ªáu gi·ªØa c√°c th√†nh ph·∫ßn
import android.os.Handler // Import l·ªõp Handler ƒë·ªÉ x·ª≠ l√Ω c√°c t√°c v·ª• tr√™n lu·ªìng ch√≠nh
import android.os.Looper // Import l·ªõp Looper ƒë·ªÉ qu·∫£n l√Ω lu·ªìng
import android.text.InputFilter // Import l·ªõp InputFilter ƒë·ªÉ l·ªçc d·ªØ li·ªáu nh·∫≠p v√†o EditText
import android.widget.Button // Import l·ªõp Button ƒë·ªÉ t·∫°o n√∫t b·∫•m
import android.widget.EditText // Import l·ªõp EditText ƒë·ªÉ t·∫°o √¥ nh·∫≠p li·ªáu
import android.widget.LinearLayout // Import l·ªõp LinearLayout ƒë·ªÉ t·∫°o layout tuy·∫øn t√≠nh
import android.widget.Toast // Import l·ªõp Toast ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ng·∫Øn
import androidx.appcompat.app.AppCompatActivity // Import l·ªõp AppCompatActivity ƒë·ªÉ t·∫°o activity h·ªó tr·ª£
import androidx.core.app.ActivityCompat // Import l·ªõp ActivityCompat ƒë·ªÉ y√™u c·∫ßu quy·ªÅn
import androidx.core.content.ContextCompat // Import l·ªõp ContextCompat ƒë·ªÉ ki·ªÉm tra quy·ªÅn
import androidx.fragment.app.Fragment // Import l·ªõp Fragment ƒë·ªÉ t·∫°o fragment
import com.google.android.material.bottomnavigation.BottomNavigationView // Import l·ªõp BottomNavigationView ƒë·ªÉ t·∫°o thanh ƒëi·ªÅu h∆∞·ªõng d∆∞·ªõi
import com.google.android.material.floatingactionbutton.FloatingActionButton // Import l·ªõp FloatingActionButton ƒë·ªÉ t·∫°o n√∫t h√†nh ƒë·ªông n·ªïi
import java.text.SimpleDateFormat // Import l·ªõp SimpleDateFormat ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y gi·ªù
import java.util.Calendar // Import l·ªõp Calendar ƒë·ªÉ l√†m vi·ªác v·ªõi l·ªãch
import java.util.Date // Import l·ªõp Date ƒë·ªÉ l√†m vi·ªác v·ªõi ng√†y gi·ªù
import java.util.Locale // Import l·ªõp Locale ƒë·ªÉ ƒë·ªãnh d·∫°ng theo ng√¥n ng·ªØ

class MainActivity : AppCompatActivity() {
    private lateinit var homeFragment: HomeFragment // Khai b√°o bi·∫øn homeFragment ki·ªÉu HomeFragment

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // üõ†Ô∏è X√≥a to√†n b·ªô d·ªØ li·ªáu test c≈© (ch·ªâ ch·∫°y 1 l·∫ßn)
        val sharedPref =
            getSharedPreferences("TaskByDate", Context.MODE_PRIVATE) // L·∫•y SharedPreferences
        sharedPref.edit().clear().apply() // X√≥a to√†n b·ªô d·ªØ li·ªáu trong SharedPreferences

        setContentView(R.layout.activity_main) // Thi·∫øt l·∫≠p layout cho activity
        try {
            setContentView(R.layout.activity_main) // Thi·∫øt l·∫≠p l·∫°i layout (c√≥ th·ªÉ th·ª´a)

            homeFragment = HomeFragment() // Kh·ªüi t·∫°o homeFragment
            loadFragment(homeFragment) // T·∫£i fragment homeFragment

            val bottomNavigation: BottomNavigationView =
                findViewById(R.id.bottom_navigation) // T√¨m BottomNavigationView trong layout
            val fabAdd: FloatingActionButton =
                findViewById(R.id.fab_add) // T√¨m FloatingActionButton trong layout

            bottomNavigation.setOnItemSelectedListener { item -> // Thi·∫øt l·∫≠p listener cho BottomNavigationView
                when (item.itemId) {
                    R.id.nav_home -> { // N·∫øu ch·ªçn item nav_home
                        loadFragment(homeFragment) // T·∫£i homeFragment
                        fabAdd.show() // Hi·ªÉn th·ªã FloatingActionButton
                        true // Tr·∫£ v·ªÅ true ƒë·ªÉ x√°c nh·∫≠n ƒë√£ x·ª≠ l√Ω s·ª± ki·ªán
                    }

                    R.id.nav_tasks -> { // N·∫øu ch·ªçn item nav_tasks
                        val calenderFragment = CalenderFragment() // Kh·ªüi t·∫°o calenderFragment
                        loadFragment(calenderFragment) // T·∫£i calenderFragment

                        Handler(Looper.getMainLooper()).postDelayed({ // S·ª≠ d·ª•ng Handler ƒë·ªÉ tr√¨ ho√£n vi·ªác t·∫£i d·ªØ li·ªáu
                            if (calenderFragment.isAdded) { // Ki·ªÉm tra xem calenderFragment ƒë√£ ƒë∆∞·ª£c th√™m v√†o activity ch∆∞a
                                calenderFragment.loadTasksForDate(calenderFragment.getTodayDate()) // T·∫£i d·ªØ li·ªáu cho ng√†y h√¥m nay
                            }
                        }, 300)
                        // Delay 300ms

                        fabAdd.hide() // ·∫®n FloatingActionButton
                        true // Tr·∫£ v·ªÅ true ƒë·ªÉ x√°c nh·∫≠n ƒë√£ x·ª≠ l√Ω s·ª± ki·ªán
                    }

                    R.id.nav_profile -> { // N·∫øu ch·ªçn item nav_profile
                        loadFragment(ProfileFragment()) // T·∫£i ProfileFragment
                        fabAdd.hide() // ·∫®n FloatingActionButton
                        true // Tr·∫£ v·ªÅ true ƒë·ªÉ x√°c nh·∫≠n ƒë√£ x·ª≠ l√Ω s·ª± ki·ªán
                    }

                    else -> false // N·∫øu kh√¥ng kh·ªõp v·ªõi item n√†o, tr·∫£ v·ªÅ false
                }
            }

            fabAdd.setOnClickListener { // Thi·∫øt l·∫≠p listener cho FloatingActionButton
                showAddTodoDialog() // Hi·ªÉn th·ªã h·ªôp tho·∫°i th√™m c√¥ng vi·ªác
            }

            createNotificationChannel() // T·∫°o k√™nh th√¥ng b√°o
            requestNotificationPermission() // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
        } catch (e: Exception) { // X·ª≠ l√Ω ngo·∫°i l·ªá
            e.printStackTrace() // In l·ªói ra log
            Toast.makeText(this, "L·ªói: " + e.message, Toast.LENGTH_LONG)
                .show() // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        }
    }

    /** ‚úÖ T·∫°o k√™nh th√¥ng b√°o (Ch·ªâ ch·∫°y tr√™n Android 8.0 tr·ªü l√™n) */
    private fun createNotificationChannel() {
        // Ki·ªÉm tra phi√™n b·∫£n Android
        val channel = NotificationChannel(
            "todo_channel", // ID c·ªßa k√™nh ph·∫£i gi·ªëng v·ªõi ID trong NotificationCompat.Builder
            "Task Reminders", // T√™n k√™nh
            NotificationManager.IMPORTANCE_HIGH // M·ª©c ƒë·ªô quan tr·ªçng c·ªßa k√™nh
        )
        channel.description = "Channel for task reminders" // M√¥ t·∫£ k√™nh

        val notificationManager =
            getSystemService(NotificationManager::class.java) // L·∫•y NotificationManager
        notificationManager.createNotificationChannel(channel) // T·∫°o k√™nh th√¥ng b√°o
    }

    /** ‚úÖ Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o tr√™n Android 13+ */
    private fun requestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) { // Android 13+ (API 33)
            if (ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.POST_NOTIFICATIONS
                ) // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o
                != PackageManager.PERMISSION_GRANTED
            ) {
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.POST_NOTIFICATIONS),
                    1
                ) // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
            }
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1) { // Ki·ªÉm tra m√£ y√™u c·∫ßu
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) { // Ki·ªÉm tra quy·ªÅn ƒë∆∞·ª£c c·∫•p
                Toast.makeText(this, "Notification permission granted", Toast.LENGTH_SHORT)
                    .show() // Hi·ªÉn th·ªã th√¥ng b√°o quy·ªÅn ƒë∆∞·ª£c c·∫•p
            } else {
                Toast.makeText(this, "Notification permission denied", Toast.LENGTH_SHORT)
                    .show() // Hi·ªÉn th·ªã th√¥ng b√°o quy·ªÅn b·ªã t·ª´ ch·ªëi
            }
        }
    }

    /** ‚úÖ Hi·ªÉn th·ªã h·ªôp tho·∫°i nh·∫≠p c√¥ng vi·ªác m·ªõi */
    @SuppressLint("SetTextI18n")
    private fun showAddTodoDialog() {
        val builder = AlertDialog.Builder(this) // T·∫°o AlertDialog.Builder
        builder.setTitle("Add your task") // Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ

        val layout = LinearLayout(this) // T·∫°o LinearLayout
        layout.orientation = LinearLayout.VERTICAL // Thi·∫øt l·∫≠p h∆∞·ªõng d·ªçc
        layout.setPadding(50, 20, 50, 20) // Thi·∫øt l·∫≠p padding

        val input = EditText(this) // T·∫°o EditText
        input.hint = "Write your task name (max 30 characters)" // Thi·∫øt l·∫≠p hint
        input.filters = arrayOf(InputFilter.LengthFilter(30)) // Gi·ªõi h·∫°n s·ªë k√Ω t·ª±
        layout.addView(input) // Th√™m EditText v√†o layout

        // N√∫t ch·ªçn th·ªùi gian
        val btnSetTimer = Button(this) // T·∫°o Button
        btnSetTimer.text = "SET TIME" // Thi·∫øt l·∫≠p text
        layout.addView(btnSetTimer) // Th√™m Button v√†o layout

        var selectedDateTime: Long? = null // üî• ƒê·ªïi ki·ªÉu th√†nh Long ƒë·ªÉ l∆∞u th·ªùi gian ch√≠nh x√°c

        btnSetTimer.setOnClickListener { // Thi·∫øt l·∫≠p listener cho Button
            showDateTimePicker(this) { dateTime -> // üî• Th√™m `this` ƒë·ªÉ truy·ªÅn context
                selectedDateTime = dateTime // L∆∞u th·ªùi gian ƒë√£ ch·ªçn
                btnSetTimer.text =
                    "Time: ${getFormattedDate(dateTime)}" // üî• Hi·ªÉn th·ªã th·ªùi gian ƒë√£ ch·ªçn
            }
        }

        builder.setView(layout) // Thi·∫øt l·∫≠p view cho dialog

        builder.setPositiveButton("Ok") { _, _ -> // Thi·∫øt l·∫≠p button ok
            val taskText = input.text.toString().trim() // L·∫•y text t·ª´ edittext
            if (taskText.isNotEmpty()) { // Ki·ªÉm tra text kh√¥ng r·ªóng
                val dateTimeToSave = selectedDateTime
                    ?: System.currentTimeMillis() //  N·∫øu kh√¥ng ch·ªçn th·ªùi gian, l·∫•y th·ªùi gian hi·ªán t·∫°i

                homeFragment.addTask(taskText, dateTimeToSave) // Th√™m task v√†o home fragment
                saveTask(dateTimeToSave, taskText) //  Truy·ªÅn timestamp (Long) thay v√¨ String

                Toast.makeText(
                    this,
                    "Added: $taskText - ${getFormattedDate(dateTimeToSave)}",
                    Toast.LENGTH_SHORT
                ).show() // Hi·ªÉn th·ªã th√¥ng b√°o
            } else {
                Toast.makeText(this, "Task cannot be empty!", Toast.LENGTH_SHORT)
                    .show() // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            }
        }

        builder.setNegativeButton("Cancel") { dialog, _ -> dialog.dismiss() } // Thi·∫øt l·∫≠p button cancel
        builder.show() // Hi·ªÉn th·ªã dialog
    }

    /** ‚úÖ Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c Fragment */
    private fun loadFragment(fragment: Fragment) {
        supportFragmentManager.beginTransaction() // B·∫Øt ƒë·∫ßu transaction
            .replace(R.id.fragment_container, fragment) // Thay th·∫ø fragment
            .commit() // Commit transaction
    }

    /** ‚úÖ Hi·ªÉn th·ªã b·ªô ch·ªçn ng√†y gi·ªù */
    private fun showDateTimePicker(context: Context, onDateTimeSelected: (Long) -> Unit) {
        val calendar = Calendar.getInstance() // L·∫•y instance c·ªßa Calendar

        DatePickerDialog(
            context, { _, year, month, day -> // T·∫°o DatePickerDialog
                calendar.set(Calendar.YEAR, year) // Thi·∫øt l·∫≠p nƒÉm
                calendar.set(Calendar.MONTH, month) // Thi·∫øt l·∫≠p th√°ng
                calendar.set(Calendar.DAY_OF_MONTH, day) // Thi·∫øt l·∫≠p ng√†y

                TimePickerDialog(
                    context, { _, hour, minute -> // T·∫°o TimePickerDialog
                        calendar.set(Calendar.HOUR_OF_DAY, hour) // Thi·∫øt l·∫≠p gi·ªù
                        calendar.set(Calendar.MINUTE, minute) // Thi·∫øt l·∫≠p ph√∫t
                        calendar.set(Calendar.SECOND, 0) // Thi·∫øt l·∫≠p gi√¢y

                        onDateTimeSelected(calendar.timeInMillis) //  Tr·∫£ v·ªÅ timestamp ch√≠nh x√°c
                    }, calendar.get(Calendar.HOUR_OF_DAY),
                    calendar.get(Calendar.MINUTE), true
                ).show() // Hi·ªÉn th·ªã TimePickerDialog

            }, calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH),
            calendar.get(Calendar.DAY_OF_MONTH)
        ).show() // Hi·ªÉn th·ªã DatePickerDialog
    }

    @SuppressLint("MutatingSharedPrefs")
    private fun saveTask(timestamp: Long, task: String) {
        val sharedPref = getSharedPreferences("TASKS", MODE_PRIVATE) // L·∫•y SharedPreferences
        val editor = sharedPref.edit() // L·∫•y editor

        //  Chuy·ªÉn timestamp th√†nh ng√†y (dd/MM/yyyy)
        val dateKey = getFormattedDate(timestamp).split(" ")[0] // L·∫•y ng√†y t·ª´ timestamp

        val tasksForDate = sharedPref.getStringSet(dateKey, mutableSetOf())
            ?: mutableSetOf() // L·∫•y danh s√°ch task theo ng√†y
        tasksForDate.add(task) // Th√™m task m·ªõi v√†o danh s√°ch ng√†y ƒë√≥

        editor.putStringSet(dateKey, tasksForDate) // L∆∞u danh s√°ch task
        editor.apply() // √Åp d·ª•ng thay ƒë·ªïi

        println("‚úÖ ƒê√£ l∆∞u task v√†o ng√†y: $dateKey -> $tasksForDate") // In th√¥ng b√°o ƒë√£ l∆∞u
    }

    private fun getFormattedDate(timeInMillis: Long): String {
        val sdf = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault()) // T·∫°o SimpleDateFormat
        return sdf.format(Date(timeInMillis)) // ƒê·ªãnh d·∫°ng ng√†y gi·ªù
    }
}